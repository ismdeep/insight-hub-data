{
  "id": "6cdd596127a38a5ffdac33d4c72a04e94df96abc7e1b4b99f9dd3e85ecb153a6",
  "source": "ARTHURCHIAO'S BLOG",
  "link": "https://arthurchiao.art/blog/tcp-requests-stuck-after-connection-established/",
  "title": "TCP Requests Stuck After Connection Established（2024）",
  "author": "Arthur Chiao",
  "content": "\u003cdiv class=\"post\"\u003e\n  \n  \u003ch1 class=\"postTitle\"\u003eTCP Requests Stuck After Connection Established（2024）\u003c/h1\u003e\n  \u003cp class=\"meta\"\u003ePublished at 2024-06-26 | Last Update 2024-06-26\u003c/p\u003e\n  \n  \u003cp\u003eThis post describes a kernel \u0026amp; BPF networking problem\nand the trouble shooting steps, which is an interesting case for delving into\nLinux kernel networking intricacies.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/testcase-comparison.png\" width=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Phenomenon of a reported issue.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#1-trouble-report\" id=\"markdown-toc-1-trouble-report\"\u003e1 Trouble report\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#11-phenomenon-probabilistic-health-check-failures\" id=\"markdown-toc-11-phenomenon-probabilistic-health-check-failures\"\u003e1.1 Phenomenon: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eprobabilistic health check failures\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#12-scope-specific-pods-on-specific-nodes\" id=\"markdown-toc-12-scope-specific-pods-on-specific-nodes\"\u003e1.2 Scope: specific pods on specific nodes\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#2-networking-fundamentals\" id=\"markdown-toc-2-networking-fundamentals\"\u003e2 Networking fundamentals\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#21-node-network-topology-cilium-with-bpf\" id=\"markdown-toc-21-node-network-topology-cilium-with-bpf\"\u003e2.1 Node network topology: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCilium (with BPF)\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#22-kernel-510-sockmap-bpf-acceleration-for-node2localpod-traffic\" id=\"markdown-toc-22-kernel-510-sockmap-bpf-acceleration-for-node2localpod-traffic\"\u003e2.2 Kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.10+\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esockmap BPF\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e acceleration for \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003enode2localPod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e traffic\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#221-sockops-bpf-bypass-kernel-stack-for-local-traffic\" id=\"markdown-toc-221-sockops-bpf-bypass-kernel-stack-for-local-traffic\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e BPF: bypass kernel stack for local traffic\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#222-tcpdump-only-tcp-3-way4-way-handshake-packets-can-be-captured\" id=\"markdown-toc-222-tcpdump-only-tcp-3-way4-way-handshake-packets-can-be-captured\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e: only TCP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3-way/4-way\u003c/code\u003e handshake packets can be captured\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#23-summary\" id=\"markdown-toc-23-summary\"\u003e2.3 Summary\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#3-quick-narrow-down\" id=\"markdown-toc-3-quick-narrow-down\"\u003e3 Quick narrow-down\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#31-quick-reproduction\" id=\"markdown-toc-31-quick-reproduction\"\u003e3.1 Quick reproduction\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#32-narrow-down-the-issue\" id=\"markdown-toc-32-narrow-down-the-issue\"\u003e3.2 Narrow-down the issue\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#321-ping-ok-exclude-l2l3-problem\" id=\"markdown-toc-321-ping-ok-exclude-l2l3-problem\"\u003e3.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping\u003c/code\u003e: OK, exclude L2/L3 problem\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#322-telnet-connection-test-ok-exclude-tcp-connecting-problem\" id=\"markdown-toc-322-telnet-connection-test-ok-exclude-tcp-connecting-problem\"\u003e3.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etelnet\u003c/code\u003e connection test: OK, exclude TCP connecting problem\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#323-remote-to-localpod-curl-ok-exclude-pod-problem--vanilla-kernel-stack-problem\" id=\"markdown-toc-323-remote-to-localpod-curl-ok-exclude-pod-problem--vanilla-kernel-stack-problem\"\u003e3.2.3 Remote-to-localPod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e: OK, exclude pod problem \u0026amp; vanilla kernel stack problem\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#324-local-pod-to-pod-ok-exclude-some-node-internal-problems\" id=\"markdown-toc-324-local-pod-to-pod-ok-exclude-some-node-internal-problems\"\u003e3.2.4 Local pod-to-pod: OK, exclude some node-internal problems\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#33-summary-only-node-to-localpod-tcp-requests-stuck-probabilistically\" id=\"markdown-toc-33-summary-only-node-to-localpod-tcp-requests-stuck-probabilistically\"\u003e3.3 Summary: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eonly node-to-localPod TCP requests stuck probabilistically\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#4-dig-deeper\" id=\"markdown-toc-4-dig-deeper\"\u003e4 Dig deeper\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#41-linux-vs-alios-kernel\" id=\"markdown-toc-41-linux-vs-alios-kernel\"\u003e4.1 Linux vs. AliOS kernel\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#411-compare-bpf-features\" id=\"markdown-toc-411-compare-bpf-features\"\u003e4.1.1 Compare BPF features\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#412-alios-cloud-kernel-specific-changes\" id=\"markdown-toc-412-alios-cloud-kernel-specific-changes\"\u003e4.1.2 AliOS cloud-kernel specific changes\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#42-check-detailed-tcp-connection-stats\" id=\"markdown-toc-42-check-detailed-tcp-connection-stats\"\u003e4.2 Check detailed TCP connection stats\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#421-normal-case-ss-shows-correct-segs_outsegs_in\" id=\"markdown-toc-421-normal-case-ss-shows-correct-segs_outsegs_in\"\u003e4.2.1 Normal case: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e shows correct \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esegs_out/segs_in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#422-abnormal-case-ss-shows-incorrect-segs_outsegs_in\" id=\"markdown-toc-422-abnormal-case-ss-shows-incorrect-segs_outsegs_in\"\u003e4.2.2 Abnormal case: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e shows incorrect \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esegs_out/segs_in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#43-trace-related-call-stack\" id=\"markdown-toc-43-trace-related-call-stack\"\u003e4.3 Trace related call stack\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#431-trace-cmd-trace-kernel-call-stacks\" id=\"markdown-toc-431-trace-cmd-trace-kernel-call-stacks\"\u003e4.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace-cmd\u003c/code\u003e: trace kernel call stacks\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#432-locate-the-code-inet_recvmsg---tcp_bpf_recvmsg-tcp_recvmsg\" id=\"markdown-toc-432-locate-the-code-inet_recvmsg---tcp_bpf_recvmsg-tcp_recvmsg\"\u003e4.3.2 Locate the code: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003einet_recvmsg -\u0026gt; {tcp_bpf_recvmsg, tcp_recvmsg}\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#433-double-check-with-bpftrace\" id=\"markdown-toc-433-double-check-with-bpftrace\"\u003e4.3.3 Double check with bpftrace\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#434-summary\" id=\"markdown-toc-434-summary\"\u003e4.3.4 Summary\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#44-recvmsg-handler-initialization-in-kernel-stack\" id=\"markdown-toc-44-recvmsg-handler-initialization-in-kernel-stack\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erecvmsg\u003c/code\u003e handler initialization in kernel stack\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#45-confirm-stale-entries-in-sockmap\" id=\"markdown-toc-45-confirm-stale-entries-in-sockmap\"\u003e4.5 Confirm stale entries in sockmap\u003c/a\u003e        \u003cul\u003e\n          \u003cli\u003e\u003ca href=\"#451-bpftrace-tcp_bpf_get_prot-incorrect-socket-handler-sk_prot\" id=\"markdown-toc-451-bpftrace-tcp_bpf_get_prot-incorrect-socket-handler-sk_prot\"\u003e4.5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_get_prot()\u003c/code\u003e: incorrect socket handler (sk_prot)\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#452-bpftrace-sk_psock_drop\" id=\"markdown-toc-452-bpftrace-sk_psock_drop\"\u003e4.5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_psock_drop\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n          \u003cli\u003e\u003ca href=\"#453-bpftool-confirm-stale-connection-info-in-sockops-map\" id=\"markdown-toc-453-bpftool-confirm-stale-connection-info-in-sockops-map\"\u003e4.5.3 bpftool: confirm stale connection info in sockops map\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#5-technical-summary\" id=\"markdown-toc-5-technical-summary\"\u003e5 Technical summary\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#51-normal-sockopssockmap-bpf-workflow\" id=\"markdown-toc-51-normal-sockopssockmap-bpf-workflow\"\u003e5.1 Normal sockops/sockmap BPF workflow\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#52-direct-cause\" id=\"markdown-toc-52-direct-cause\"\u003e5.2 Direct cause\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#53-root-cause-tbd\" id=\"markdown-toc-53-root-cause-tbd\"\u003e5.3 Root cause: TBD\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#54-restoreremediation-methods\" id=\"markdown-toc-54-restoreremediation-methods\"\u003e5.4 Restore/remediation methods\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#appendix\" id=\"markdown-toc-appendix\"\u003eAppendix\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#references\" id=\"markdown-toc-references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch1 id=\"1-trouble-report\"\u003e1 Trouble report\u003c/h1\u003e\n\n\u003ch2 id=\"11-phenomenon-probabilistic-health-check-failures\"\u003e1.1 Phenomenon: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eprobabilistic health check failures\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eUsers reported \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eintermittent failures\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e of their pods,\ndespite them run as usual with no exceptions.\u003c/p\u003e\n\n\u003cp\u003eThe health check is a \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003every simple HTTP probe over TCP\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e:\nkubelet periodically (e.g. every 5s) sends \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET\u003c/code\u003e requests to local pods,\ninitiating a new TCP connection with each request.\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/health-check.png\" width=\"60%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Intermittent health check failures of pods.\u003c/p\u003e\n\n\u003cp\u003eUsers suspect this is a network problem.\u003c/p\u003e\n\n\u003ch2 id=\"12-scope-specific-pods-on-specific-nodes\"\u003e1.2 Scope: specific pods on specific nodes\u003c/h2\u003e\n\n\u003cp\u003eThis reported issue is confined to a new k8s cluster, with \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003erecently introduced OS and kernel\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOS: AliOS (AlibabaCloud OS)\u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eKernel: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecloud-kernel\u003c/code\u003e 5.10.134-16.al8.x86_64 (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ea fork of Linux\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\n\u003ca href=\"https://gitee.com/anolis/cloud-kernel\"\u003egitee.com/anolis/cloud-kernel\u003c/a\u003e), which includes their\nupstream feature backports and self-maintanined changes, for example,\u003c/p\u003e\n\n    \u003col\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eIntel AMX\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (Advanced Matrix Extensions) for \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eAI workloads\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\noffering a hardware acceleration alternative to GPUs in certain scenarios,\nsuch as inference for LLMs smaller than 13B.\nAMX support was first \u003ca href=\"https://lwn.net/Articles/875733/\"\u003eintroduced in kernel 5.16\u003c/a\u003e,\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecloud-kernel\u003c/code\u003e backported the feature to its current version \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e5.10\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n      \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecloud-kernel\u003c/code\u003e includes un-upstreamed modifications like new kernel structure fields and new enums/types.\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOther environment info:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCilium: self-maintained v1.11.10\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://www.cncf.io/case-studies/trip-com-group/\"\u003eCNCF Case Study: How Trip.com Group switched to Cilium For Scalable and Cloud Native Networking\u003c/a\u003e, 2023\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"2-networking-fundamentals\"\u003e2 Networking fundamentals\u003c/h1\u003e\n\n\u003cp\u003eBefore starting our exploration, let’s outline our networking infra in this cluster.\u003c/p\u003e\n\n\u003ch2 id=\"21-node-network-topology-cilium-with-bpf\"\u003e2.1 Node network topology: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCilium (with BPF)\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eInternal networking topology of our k8s node is depicted as below:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/node-internal-networking-topo.png\" width=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Internal networking topology of a k8s node.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003ek8s node\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003eroute \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e\nDestination  Gateway   Genmask           Use Iface\n0.0.0.0      \u0026lt;GW-IP\u0026gt;   0.0.0.0           eth0\n\u0026lt;Node-IP\u0026gt;    0.0.0.0   \u0026lt;Node-IP-Mask\u0026gt;    eth0\n\u0026lt;Pod1-IP\u0026gt;    0.0.0.0   255.255.255.255   lxc-1\n\u0026lt;Pod2-IP\u0026gt;    0.0.0.0   255.255.255.255   lxc-2\n\u0026lt;Pod3-IP\u0026gt;    0.0.0.0   255.255.255.255   lxc-3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs shown in the picture and kernel routing table output, \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eeach pod has a dedicated routing entry\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\nConsequently, all health check traffic is directed straight to the lxc device\n(the host-side device of the pod’s veth pair), subsequently entering the Pod.\nIn another word, \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eall the health check traffic is processed locally\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eCilium has a similar networking topology on AlibabaCloud as on AWS.\nFor more information, refer to\n\u003ca href=\"/blog/cilium-network-topology-on-aws/\"\u003e\u003cmark\u003eCilium Network Topology and Traffic Path on AWS\u003c/mark\u003e (2019)\u003c/a\u003e,\nwhich may contain some stale information, but most of the content should still validate.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"22-kernel-510-sockmap-bpf-acceleration-for-node2localpod-traffic\"\u003e2.2 Kernel \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e5.10+\u003c/code\u003e: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esockmap BPF\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e acceleration for \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003enode2localPod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e traffic\u003c/h2\u003e\n\n\u003ch3 id=\"221-sockops-bpf-bypass-kernel-stack-for-local-traffic\"\u003e2.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e BPF: bypass kernel stack for local traffic\u003c/h3\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/socket-acceleration-with-ebpf/bpf-kernel-hooks.png\" width=\"50%\" height=\"50%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://cyral.com/blog/how-to-ebpf-accelerating-cloud-native/\"\u003eHow to use eBPF for accelerating Cloud Native\napplications\u003c/a\u003e\noffers a practical example of how sockops/sockmap BPF programs work.\u003c/p\u003e\n\n\u003cp\u003eChinese readers can also refer to the following for more information,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ca href=\"/blog/socket-acceleration-with-ebpf-zh/\"\u003e（译）利用 ebpf sockmap/redirection 提升 socket 性能（2020）\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/bpf-advanced-notes-5-zh/\"\u003eBPF 进阶笔记（五）：几种 TCP 相关的 BPF（sockops、struct_ops、header options）\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"222-tcpdump-only-tcp-3-way4-way-handshake-packets-can-be-captured\"\u003e2.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e: only TCP \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e3-way/4-way\u003c/code\u003e handshake packets can be captured\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esockops\u003c/code\u003e acceleration is automatically enabled in kernel 5.10 + Cilium v1.11.10:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/socket-acceleration-with-ebpf/sock-redir.png\" width=\"70%\" height=\"70%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Socket-level acceleration in Cilium.\nNote that the illustration depicts local processes communicating via loopback, which differs from the scenario discussed here,\njust too lazy draw a new picture.\u003c/p\u003e\n\n\u003cp\u003eOne big conceptual change is that when sockops BPF is enabled, you could not\nsee request \u0026amp; response packets in tcpdump output, as in this setup, only TCP\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e3-way handshake and 4-way close procedure\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e still go through kernel networking\nstack, all the payload will directly go through the socket-level (e.g. in\ntcp/udp send/receive message) methods.\u003c/p\u003e\n\n\u003cp\u003eA quick test to illustrate the idea: access a server in pod from the node:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;pod ip\u0026gt;:\u0026lt;port\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe output of tcpdump:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003epod\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth0 host \u0026lt;node ip\u0026gt; and \u0026lt;port\u0026gt;\n\u003cspan class=\"c\"\u003e# TCP 3-way handshake\u003c/span\u003e\nIP NODE_IP.36942 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e POD_IP.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS]\nIP POD_IP.8080   \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e NODE_IP.36942: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eS.]\nIP NODE_IP.36942 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e POD_IP.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.]\n\n\u003cspan class=\"c\"\u003e# requests \u0026amp; responses, no packets go through there, they are bypassed,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# payloads are transferred directly in socket-level TCP methods\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# TCP 4-way close\u003c/span\u003e\nIP POD_IP.8080   \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e NODE_IP.36942: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eF.]\nIP NODE_IP.36942 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e POD_IP.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.]\nIP NODE_IP.36942 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e POD_IP.8080: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003eF.]\nIP POD_IP.8080   \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e NODE_IP.36942: Flags \u003cspan class=\"o\"\u003e[\u003c/span\u003e.]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"23-summary\"\u003e2.3 Summary\u003c/h2\u003e\n\n\u003cp\u003eNow we’ve got a basic undertanding about the problem and environment.\nIt’s time to delve into practical investigation.\u003c/p\u003e\n\n\u003ch1 id=\"3-quick-narrow-down\"\u003e3 Quick narrow-down\u003c/h1\u003e\n\n\u003ch2 id=\"31-quick-reproduction\"\u003e3.1 Quick reproduction\u003c/h2\u003e\n\n\u003cp\u003eFirst, check kubelet log,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Timeout exceeded while awaiting headers\u0026#34;\u003c/span\u003e /var/log/kubernetes/kubelet.INFO\nprober.go] Readiness probe \u003cspan class=\"k\"\u003efor \u003c/span\u003ePOD_XXX failed \u003cspan class=\"o\"\u003e(\u003c/span\u003efailure\u003cspan class=\"o\"\u003e)\u003c/span\u003e:\n  Get \u003cspan class=\"s2\"\u003e\u0026#34;http://POD_IP:PORT/health\u0026#34;\u003c/span\u003e: context deadline exceeded \u003cspan class=\"o\"\u003e(\u003c/span\u003eClient.Timeout exceeded \u003cspan class=\"k\"\u003ewhile \u003c/span\u003eawaiting headers\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIndeed, there are many readiness probe failures.\u003c/p\u003e\n\n\u003cp\u003eSince the probe is very simple HTTP request, we can do it manually on the node,\nthis should be \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eequivalent to the kubelet probe\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health\nOK\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health\nOK\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health \u003cspan class=\"c\"\u003e# stuck\u003c/span\u003e\n^C\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOK, we can easily reproduce it without relying on k8s facilities.\u003c/p\u003e\n\n\u003ch2 id=\"32-narrow-down-the-issue\"\u003e3.2 Narrow-down the issue\u003c/h2\u003e\n\n\u003cp\u003eNow let’s perform some quick tests to narrow-down the problem.\u003c/p\u003e\n\n\u003ch3 id=\"321-ping-ok-exclude-l2l3-problem\"\u003e3.2.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping\u003c/code\u003e: OK, exclude L2/L3 problem\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eping\u003c/code\u003e PodIP from node \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ealways succeeds\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003eping \u0026lt;POD_IP\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis indicates L2 \u0026amp; L3 (ARP table, routing table, etc) connectivity functions well.\u003c/p\u003e\n\n\u003ch3 id=\"322-telnet-connection-test-ok-exclude-tcp-connecting-problem\"\u003e3.2.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etelnet\u003c/code\u003e connection test: OK, exclude TCP connecting problem\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003etelnet POD_IP PORT\nTrying POD_IP...\nConnected to POD_IP.\nEscape character is \u003cspan class=\"s1\"\u003e\u0026#39;^]\u0026#39;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAgain, always succeeds, and the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e output confirms the connections always enter \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eESTABLISHED\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e state:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003enetstat \u003cspan class=\"nt\"\u003e-antp\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003etelnet\ntcp        0      0 NODE_IP:34316    POD_IP:PORT     ESTABLISHED 2360593/telnet\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"323-remote-to-localpod-curl-ok-exclude-pod-problem--vanilla-kernel-stack-problem\"\u003e3.2.3 Remote-to-localPod \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e: OK, exclude pod problem \u0026amp; vanilla kernel stack problem\u003c/h3\u003e\n\n\u003cp\u003eDo the same health check from a remote node, always OK:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode2\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health\nOK\n...\n\u003cspan class=\"o\"\u003e(\u003c/span\u003enode2\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health\nOK\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis rules out issues with the pod itself and the vanilla kernel stack.\u003c/p\u003e\n\n\u003ch3 id=\"324-local-pod-to-pod-ok-exclude-some-node-internal-problems\"\u003e3.2.4 Local pod-to-pod: OK, exclude some node-internal problems\u003c/h3\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003epod3\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD2_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health\nOK\n...\n\u003cspan class=\"o\"\u003e(\u003c/span\u003epod3\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u0026lt;POD2_IP\u0026gt;:\u0026lt;PORT\u0026gt;/v1/health\nOK\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAlways OK. Rule out issues with the pod itself.\u003c/p\u003e\n\n\u003ch2 id=\"33-summary-only-node-to-localpod-tcp-requests-stuck-probabilistically\"\u003e3.3 Summary: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eonly node-to-localPod TCP requests stuck probabilistically\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/testcase-comparison.png\" width=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Test cases and results.\u003c/p\u003e\n\n\u003cp\u003eThe difference of three cases:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eNode-to-localPod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: payload traffic is processed via \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esockops BPF\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eLocal Pod-to-Pod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eBPF redirection\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (or kernel stack, based on your kernel version)\n    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"/blog/differentiate-bpf-redirects/\"\u003eDifferentiate three types of eBPF redirections (2022)\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eRemoteNode-to-localPod\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: standard kernel networking stack\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eCombining these information, we guess with confidence that the problem have\nrelationships with sockops BPF and kernel (because kernel does most of the job in sockops BPF scenarios).\u003c/p\u003e\n\n\u003cp\u003eFrom these observations, it is reasonable to deduce that the issue is likely\nrelated to \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esockops BPF and the kernel\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, given the\nkernel’s central role in sockops BPF scenarios.\u003c/p\u003e\n\n\u003ch1 id=\"4-dig-deeper\"\u003e4 Dig deeper\u003c/h1\u003e\n\n\u003cp\u003eNow let’s explore the issue in greater depth.\u003c/p\u003e\n\n\u003ch2 id=\"41-linux-vs-alios-kernel\"\u003e4.1 Linux vs. AliOS kernel\u003c/h2\u003e\n\n\u003cp\u003eAs we’ve been using kernel \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e5.10.56\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e and cilium\nv1.11.10 for years and haven’t met this problem before, the first reasonable\nassumption is that AliOS cloud-kernel 5.10.134 may introduce some incompatible changes or bugs.\u003c/p\u003e\n\n\u003cp\u003eSo we spent some time comparing AliOS cloud-kernel with the upstream Linux.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNote: cloud-kernel is maintained on\ngitee.com, which restricts most read privileges (e.g. commits, blame) without logging in,\nso in the remaining of this post we reference the Linux repo on github.com for discussion.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"411-compare-bpf-features\"\u003e4.1.1 Compare BPF features\u003c/h3\u003e\n\n\u003cp\u003eFirst, compare BPF features automatically detected by cilium-agent on the node.\nThe result is written to a local file on the node:\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e/var/run/cilium/state/globals/bpf_features.h\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ediff \u0026lt;bpf_features.h from our 5.10.56 node\u0026gt; \u0026lt;bpf_features.h from AliOS node\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-diff highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e59c59\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e\u0026lt; #define NO_HAVE_XSKMAP_MAP_TYPE\n\u003c/span\u003e\u003cspan class=\"p\"\u003e---\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e\u0026gt; #define HAVE_XSKMAP_MAP_TYPE\n\u003c/span\u003e\u003cspan class=\"p\"\u003e71c71\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e\u0026lt; #define NO_HAVE_TASK_STORAGE_MAP_TYPE\n\u003c/span\u003e\u003cspan class=\"p\"\u003e---\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e\u0026gt; #define HAVE_TASK_STORAGE_MAP_TYPE\n\u003c/span\u003e\u003cspan class=\"p\"\u003e243c243\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e\u0026lt; #define BPF__PROG_TYPE_socket_filter__HELPER_bpf_ktime_get_coarse_ns 0\n\u003c/span\u003e\u003cspan class=\"p\"\u003e---\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e\u0026gt; #define BPF__PROG_TYPE_socket_filter__HELPER_bpf_ktime_get_coarse_ns 1\n\u003c/span\u003e\u003cspan class=\"err\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThere are indeed some differences, but with further investigation, we didn’t\nfind any correlation to the observed issue.\u003c/p\u003e\n\n\u003ch3 id=\"412-alios-cloud-kernel-specific-changes\"\u003e4.1.2 AliOS cloud-kernel specific changes\u003c/h3\u003e\n\n\u003cp\u003eThen we spent some time to check AliOS cloud-kernel self-maintained BPF and networking modifications.\nSuch as,\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eb578e4b8ed6e1c7608e07e03a061357fd79ac2dd\u003c/code\u003e ck: net: track the pid who created socks\u003c/p\u003e\n\n    \u003cp\u003eIn this commit, they added a \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epid_t pid\u003c/code\u003e field to the \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003estruct sock\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e data structure.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eea0307caaf29700ff71467726b9617dcb7c0d084\u003c/code\u003e tcp: make sure init the accept_queue’s spinlocks once\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBut again, we didn’t find any correlation to the problem.\u003c/p\u003e\n\n\u003ch2 id=\"42-check-detailed-tcp-connection-stats\"\u003e4.2 Check detailed TCP connection stats\u003c/h2\u003e\n\n\u003cp\u003eWithout valuable information from code comparison, we redirected our focus to the environment,\ncollecting some more detailed connection information.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e (socket stats) is a powerful and convenient tool for socket/connection introspection:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e-i/--info\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: show internal TCP information, including couple of TCP connection stats;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e-e/--extended\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: show detailed socket information, including inode, uid, cookie.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"421-normal-case-ss-shows-correct-segs_outsegs_in\"\u003e4.2.1 Normal case: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e shows correct \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esegs_out/segs_in\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eInitiate a connection with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enc\u003c/code\u003e (netcat),\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003enc POD_IP PORT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eintentionally not use telnet here\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, because \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etelnet\u003c/code\u003e will close the connection\nimmediately after a request is served successfully, which leaves us \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eno time to check the connection stats in \u003ccode\u003ess\u003c/code\u003e output\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enc\u003c/code\u003e will leave the connection in \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCLOSE-WAIT\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e state, which is good enough for us to check the connection send/receive stats.\u003c/p\u003e\n\n\u003cp\u003eNow the stats for this connection:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e 1 50504\ntcp    ESTAB      0         0         NODE_IP:50504          POD_IP:PORT\n         cubic wscale:7,7 rto:200 rtt:0.059/0.029 mss:1448 pmtu:1500 rcvmss:536 advmss:1448 cwnd:10 bytes_acked:1 segs_out:2 segs_in:1 send 1963.4Mbps lastsnd:14641 lastrcv:14641 lastack:14641 pacing_rate 3926.8Mbps delivered:1 rcv_space:14480 rcv_ssthresh:64088 minrtt:0.059\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSend \u0026amp; receive stats: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esegs_out=2, segs_in=1\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow let’s send a request to the server: type \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eGET /v1/health HTTP/1.1\\r\\n\u003c/code\u003e then press \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEnter\u003c/code\u003e,\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eActually you can type anything and just \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEnter\u003c/code\u003e, the server will most likely\nsend you a \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e400\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (Bad Request) response, but for\nour case, this 400 indicate the TCP send/receive path is perfectly OK!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003enc POD_IP PORT\nGET /v1/health HTTP/1.1\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\n\u0026lt;Response Here\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe’ll get the response and the connection will just entering \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCLOSE-WAIT\u003c/code\u003e state,\nwe have some time to check it before it vanishing:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e 1 50504\ntcp     CLOSE-WAIT   0      0        NODE_IP:50504     POD_IP:http\n         cubic wscale:7,7 rto:200 rtt:0.059/0.029 ato:40 mss:1448 pmtu:1500 rcvmss:536 advmss:1448 cwnd:10 bytes_acked:1 bytes_received:1 segs_out:3 segs_in:2 send 1963.4Mbps lastsnd:24277 lastrcv:24277 lastack:4399 pacing_rate 3926.8Mbps delivered:1 rcv_space:14480 rcv_ssthresh:64088 minrtt:0.059\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs expected, \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esegs_out=3, segs_in=2\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"422-abnormal-case-ss-shows-incorrect-segs_outsegs_in\"\u003e4.2.2 Abnormal case: \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ess\u003c/code\u003e shows incorrect \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esegs_out/segs_in\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eRepeat the above test to capture a failed one.\u003c/p\u003e\n\n\u003cp\u003eOn connection established,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e 1 57424\ntcp      ESTAB      0       0         NODE_IP:57424    POD_IP:webcache\n         cubic wscale:7,7 rto:200 rtt:0.056/0.028 mss:1448 pmtu:1500 rcvmss:536 advmss:1448 cwnd:10 bytes_acked:1 segs_out:2 segs_in:1 send 2068.6Mbps lastsnd:10686 lastrcv:10686 lastack:10686 pacing_rate 4137.1Mbps delivered:1 rcv_space:14480 rcv_ssthresh:64088 minrtt:0.056\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAfter typing the request content and stroking \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eEnter\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ess \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e 1 57424\ntcp      ESTAB      0       0         NODE_IP:57424    POD_IP:webcache\n         cubic wscale:7,7 rto:200 rtt:0.056/0.028 mss:1448 pmtu:1500 rcvmss:536 advmss:1448 cwnd:10 bytes_acked:1 segs_out:2 segs_in:1 send 2068.6Mbps lastsnd:21994 lastrcv:21994 lastack:21994 pacing_rate 4137.1Mbps delivered:1 rcv_space:14480 rcv_ssthresh:64088 minrtt:0.056\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThat segments sent/received stats remain \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eunchanged\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esegs_out=2,segs_in=1\u003c/code\u003e),\nsuggesting that the problem may reside on \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003etcp {send,receive} message level\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"43-trace-related-call-stack\"\u003e4.3 Trace related call stack\u003c/h2\u003e\n\n\u003cp\u003eBased on the above hypothesis, we captured kernel call stacks\nto compare failed and successful requests.\u003c/p\u003e\n\n\u003ch3 id=\"431-trace-cmd-trace-kernel-call-stacks\"\u003e4.3.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace-cmd\u003c/code\u003e: trace kernel call stacks\u003c/h3\u003e\n\n\u003cp\u003eTrace 10 seconds, filter by server process ID, save the calling stack graph,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# filter by process ID (PID of the server in the pod)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd record \u003cspan class=\"nt\"\u003e-P\u003c/span\u003e 178501 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e function_graph \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eCaution\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: avoid tracing in production to prevent large file generation and excessive disk IO.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDuring this period, send a request,\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl POD_IP PORT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eBy default, it will save data to a local file in the current directory, the content looks like this:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etrace-cmd report \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e report-1.graph\nCPU  1 is empty\nCPU  2 is empty\n...\nCPU 63 is empty\n\u003cspan class=\"nv\"\u003ecpus\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64\n   \u0026lt;idle\u0026gt;-0     \u003cspan class=\"o\"\u003e[\u003c/span\u003e022] 5376816.422992: funcgraph_entry:    2.441 us   |  update_acpu.constprop.0\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n   \u0026lt;idle\u0026gt;-0     \u003cspan class=\"o\"\u003e[\u003c/span\u003e022] 5376816.422994: funcgraph_entry:               |  switch_mm_irqs_off\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n   \u0026lt;idle\u0026gt;-0     \u003cspan class=\"o\"\u003e[\u003c/span\u003e022] 5376816.422994: funcgraph_entry:    0.195 us   |    choose_new_asid\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n   \u0026lt;idle\u0026gt;-0     \u003cspan class=\"o\"\u003e[\u003c/span\u003e022] 5376816.422994: funcgraph_entry:    0.257 us   |    load_new_mm_cr3\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n   \u0026lt;idle\u0026gt;-0     \u003cspan class=\"o\"\u003e[\u003c/span\u003e022] 5376816.422995: funcgraph_entry:    0.128 us   |    switch_ldt\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n   \u0026lt;idle\u0026gt;-0     \u003cspan class=\"o\"\u003e[\u003c/span\u003e022] 5376816.422995: funcgraph_exit:     1.378 us   |  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eUse \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e|\u003c/code\u003e as delimiter (this preserves the calling stack and the proper leading whitespaces) and save the last fields into a dedicated file:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eawk\u003c/span\u003e \u003cspan class=\"nt\"\u003e-F\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;|\u0026#39;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{print $NF}\u0026#39;\u003c/span\u003e report-1.graph \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e stack-1.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eCompare them with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ediff\u003c/code\u003e or \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003evimdiff\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evimdiff stack-1.txt stack-2.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eHere are two traces, the left is a trace of a normal request, and the right is a problematic one:\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/trace-vimdiff.png\" width=\"90%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. Traces (call stacks) of a normal request (left side) and a problematic request (right side).\u003c/p\u003e\n\n\u003cp\u003eAs can be seen, for a failed request, \u003cstrong\u003e\u003cmark\u003ekernel made a wrong function call\u003c/mark\u003e\u003c/strong\u003e:\nit should call \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_recvmsg()\u003c/code\u003e but actually called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_recvmsg()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"432-locate-the-code-inet_recvmsg---tcp_bpf_recvmsg-tcp_recvmsg\"\u003e4.3.2 Locate the code: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003einet_recvmsg -\u0026gt; {tcp_bpf_recvmsg, tcp_recvmsg}\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eCalling into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_recvmsg\u003c/code\u003e or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_recvmsg\u003c/code\u003e from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003einet_recvmsg\u003c/code\u003e is a piece of concise code,\nillustrated below,\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v5.10/net/ipv4/af_inet.c#L838\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003einet_recvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esocket\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003emsghdr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eMSG_ERRQUEUE\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esock_rps_record_flow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eINDIRECT_CALL_2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_prot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erecvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_recvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eudp_recvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eMSG_DONTWAIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eMSG_DONTWAIT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eaddr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_namelen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaddr_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_prot\u003c/code\u003e (\u003cmark\u003e\u003ccode\u003e\u0026#34;socket protocol\u0026#34;\u003c/code\u003e\u003c/mark\u003e) contains handlers to this socket.\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eINDIRECT_CALL_2\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e line can be simplified into the following pseudocode:\u003c/p\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esk_prot\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erecvmsg\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etcp_recvmsg\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"c1\"\u003e// if socket protocol handler is tcp_recvmsg\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcp_recvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etcp_bpf_recvmsg\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis suggests that when requests fail, the \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esk_prot-\u0026gt;recvmsg\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\npointer of the socket is likely incorrect.\u003c/p\u003e\n\n\u003ch3 id=\"433-double-check-with-bpftrace\"\u003e4.3.3 Double check with bpftrace\u003c/h3\u003e\n\n\u003cp\u003eWhile \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etrace-cmd\u003c/code\u003e is a powerful tool, it may contain too much details distracting us, and\nmay run out of your disk space if set improper filter parameters.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e is a another tracing tool, and it won’t write data to local file by default.\nNow let’s double confirm the above results with it.\u003c/p\u003e\n\n\u003cp\u003eAgain, run several times of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl POD_IP:PORT\u003c/code\u003e, capture only tcp_recvmsg and tcp_bpf_recvmsg calls,\nprint kernel calling stack:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;k:tcp_recvmsg /pid==178501/ { printf(\u0026#34;%s\\n\u0026#34;, kstack);} k:tcp_bpf_recvmsg /pid==178501/ { printf(\u0026#34;%s\\n\u0026#34;, kstack);} \u0026#39;\u003c/span\u003e\n        tcp_bpf_recvmsg+1                   \u003cspan class=\"c\"\u003e# \u0026lt;-- correspond to a successful request\u003c/span\u003e\n        inet_recvmsg+233\n        __sys_recvfrom+362\n        __x64_sys_recvfrom+37\n        do_syscall_64+48\n        entry_SYSCALL_64_after_hwframe+97\n\n        tcp_bpf_recvmsg+1                   \u003cspan class=\"c\"\u003e# \u0026lt;-- correspond to a successful request\u003c/span\u003e\n        inet_recvmsg+233\n        __sys_recvfrom+362\n        __x64_sys_recvfrom+37\n        do_syscall_64+48\n        entry_SYSCALL_64_after_hwframe+97\n\n        tcp_recvmsg+1                       \u003cspan class=\"c\"\u003e# \u0026lt;-- correspond to a failed request\u003c/span\u003e\n        inet_recvmsg+78\n        __sys_recvfrom+362\n        __x64_sys_recvfrom+37\n        do_syscall_64+48\n        entry_SYSCALL_64_after_hwframe+97\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYou could also filter by client program name (\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ecomm\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e field in kernel data structure), such as,\u003c/p\u003e\n\n  \u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftrace \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;k:tcp_bpf_recvmsg /comm==\u0026#34;curl\u0026#34;/ { printf(\u0026#34;%s\u0026#34;, kstack); }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e  \u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs seen above, successful requests were directed to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_recvmsg\u003c/code\u003e, while failed ones were routed to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_recvmsg\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"434-summary\"\u003e4.3.4 Summary\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_recvmsg\u003c/code\u003e \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ewaits messages from kernel networking stack\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e,\nIn the case of sockops BPF, messages bypass kernel stack, which explains why\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003esome requests fail (timeout), yet TCP connecting always OK\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe reported the above findings to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecloud-kernel\u003c/code\u003e team, and they did some further investigations with us.\u003c/p\u003e\n\n\u003ch2 id=\"44-recvmsg-handler-initialization-in-kernel-stack\"\u003e4.4 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erecvmsg\u003c/code\u003e handler initialization in kernel stack\u003c/h2\u003e\n\n\u003cp\u003eFor short,\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/sockops-init-on-connection-estab.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. sockops BPF: connection establishement and socket handler initialization.\u003c/p\u003e\n\n\u003cp\u003eAccording to the above picture, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erecvmsg\u003c/code\u003e handler will be\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eincorrectly initialized if to-be-inserted entry already exists sockmap\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\n(the end of step 3.1).\u003c/p\u003e\n\n\u003cp\u003eWhat’s the two entries of a connection looks like in BPF map:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003ecilium-agent\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump \u003cspan class=\"nb\"\u003eid \u003c/span\u003e122 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 86 30\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e 2 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 65 f9\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e 2 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e 2 \u003cspan class=\"s2\"\u003e\u0026#34;db 78\u0026#34;\u003c/span\u003e\n0a 0a 86 30 00 00 00 00  00 00 00 00 00 00 00 00\n0a 0a 65 f9 00 00 00 00  00 00 00 00 00 00 00 00\n01 00 00 00 1f 90 00 00  db 78 00 00\n\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\nkey:\n\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\n0a 0a 65 f9 00 00 00 00  00 00 00 00 00 00 00 00\n0a 0a 86 30 00 00 00 00  00 00 00 00 00 00 00 00\n01 00 00 00 db 78 00 00  1f 90 00 00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWe’ll explain these binary data later.\nNow let’s first confirm our above assumption.\u003c/p\u003e\n\n\u003ch2 id=\"45-confirm-stale-entries-in-sockmap\"\u003e4.5 Confirm stale entries in sockmap\u003c/h2\u003e\n\n\u003ch3 id=\"451-bpftrace-tcp_bpf_get_prot-incorrect-socket-handler-sk_prot\"\u003e4.5.1 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_get_prot()\u003c/code\u003e: incorrect socket handler (sk_prot)\u003c/h3\u003e\n\n\u003cp\u003eTwo sequent function calls that holding \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_port\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_get_prot()\u003c/code\u003e: where \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_prot\u003c/code\u003e is \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003einitialized\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_recvmsg()\u003c/code\u003e or \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_recvmsg()\u003c/code\u003e: where \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_prot\u003c/code\u003e is called to \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ereceive a message\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTrace these two methods and print the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_prot\u003c/code\u003e variable (pointer).\u003c/p\u003e\n\n\u003cp\u003eSuccessful case:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003etcp_bpf_get_proto: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e59500\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 2232440\ntcp_bpf_get_proto: 0xffffffffacc65800                                     \u003cspan class=\"c\"\u003e# \u0026lt;-- sk_prot pointer\u003c/span\u003e\ntcp_bpf_recvmsg: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e59500\u003cspan class=\"o\"\u003e)\u003c/span\u003e 0xffffffffacc65800 \u003cspan class=\"c\"\u003e# \u0026lt;-- same pointer\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eBad case:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./tcp_bpf_get_proto.bt 178501\nAttaching 6 probes...\ntcp_bpf_get_proto: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e53904\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 2231203\ntcp_bpf_get_proto: 0xffffffffacc65800                                    \u003cspan class=\"c\"\u003e# \u0026lt;-- sk_prot pointer\u003c/span\u003e\ntcp_recvmsg: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e53904\u003cspan class=\"o\"\u003e)\u003c/span\u003e 0xffffffffac257300    \u003cspan class=\"c\"\u003e# \u0026lt;-- sk_prot is modified!!!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"452-bpftrace-sk_psock_drop\"\u003e4.5.2 \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftrace\u003c/code\u003e \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_psock_drop\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eA succesful case, calling into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_psock_drop\u003c/code\u003e when requests finish and connection was normally closed:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./sk_psock_drop.bt 178501\ntcp_bpf_get_proto: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e59500\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 2232440\ntcp_bpf_get_proto: 0xffffffffacc65800                                    \u003cspan class=\"c\"\u003e# \u0026lt;-- sk_prot pointer\u003c/span\u003e\nsk_psock_drop: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e， dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e44566\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    sk_psock_drop+1\n    sock_map_remove_links+161\n    sock_map_close+50\n    inet_release+63\n    sock_release+58\n    sock_close+17\n    fput+147\n    task_work_run+89\n    exit_to_user_mode_loop+285\n    exit_to_user_mode_prepare+110\n    syscall_exit_to_user_mode+18\n    entry_SYSCALL_64_after_hwframe+97\ntcp_bpf_recvmsg: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e59500\u003cspan class=\"o\"\u003e)\u003c/span\u003e 0xffffffffacc65800 \u003cspan class=\"c\"\u003e# \u0026lt;-- same pointer\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eA failed case, calling into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk_psock_drop\u003c/code\u003e when the server side calls\n\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esock_map_update()\u003c/code\u003e and \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ethe to-be-inserted entry already exists\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./sk_psock_drop.bt 178501\ntcp_bpf_get_proto: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e53904\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 2231203\ntcp_bpf_get_proto: 0xffffffffacc65800                                    \u003cspan class=\"c\"\u003e# \u0026lt;-- sk_prot pointer\u003c/span\u003e\nsk_psock_drop: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e， dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e44566\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    sk_psock_drop+1\n    sock_hash_update_common+789\n    bpf_sock_hash_update+98\n    bpf_prog_7aa9a870410635af_bpf_sockmap+831\n    _cgroup_bpf_run_filter_sock_ops+189\n    tcp_init_transfer+333                       // -\u0026gt; bpf_skops_established -\u0026gt; BPF_CGROUP_RUN_PROG_SOCK_OPS -\u0026gt; cilium sock_ops code\n    tcp_rcv_state_process+1430\n    tcp_child_process+148\n    tcp_v4_rcv+2491\n    ...\ntcp_recvmsg: src POD_IP \u003cspan class=\"o\"\u003e(\u003c/span\u003e8080\u003cspan class=\"o\"\u003e)\u003c/span\u003e, dst NODE_IP\u003cspan class=\"o\"\u003e(\u003c/span\u003e53904\u003cspan class=\"o\"\u003e)\u003c/span\u003e 0xffffffffac257300    \u003cspan class=\"c\"\u003e# \u0026lt;-- sk_prot is modified!!!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-c highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/torvalds/linux/blob/v6.5/net/core/sock_map.c#L464\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003esock_map_update_common\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_map\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu32\u003c/span\u003e \u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esock\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu64\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_stab\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estab\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtainer_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ebpf_stab\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elink\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk_psock_init_link\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esock_map_link\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epsock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk_psock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eosk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eosk\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_NOEXIST\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// sockmap entries already exists\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEEXIST\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e// goto out_unlock, which will release psock\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eosk\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eBPF_EXIST\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eENOENT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eout_unlock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003esock_map_add_link\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epsock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elink\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eosk\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esock_map_unref\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eosk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estab\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                              \u003cspan class=\"c1\"\u003e// \u0026lt;-- should return from here\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eout_unlock:\u003c/span\u003e                                \u003cspan class=\"c1\"\u003e// \u0026lt;-- actually hit here\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epsock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esk_psock_put\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epsock\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e           \u003cspan class=\"c1\"\u003e// --\u0026gt; further call sk_psock_drop\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eout_free:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esk_psock_free_link\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elink\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eearly release\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e of \u003ccode class=\"language-plaintext highlighter-rouge\"\u003epsock\u003c/code\u003e leads to the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esk-\u0026gt;sk_prot-\u0026gt;recvmsg\u003c/code\u003e to be initialized as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_recvmsg\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"453-bpftool-confirm-stale-connection-info-in-sockops-map\"\u003e4.5.3 bpftool: confirm stale connection info in sockops map\u003c/h3\u003e\n\n\u003cp\u003eKey and value format in the BPF map:\u003c/p\u003e\n\n\u003cdiv class=\"language-go highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// https://github.com/cilium/cilium/blob/v1.11.10/pkg/maps/sockmap/sockmap.go#L20\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// SockmapKey is the 5-tuple used to lookup a socket\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// +k8s:deepcopy-gen=true\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// +k8s:deepcopy-gen:interfaces=github.com/cilium/cilium/pkg/bpf.MapKey\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eSockmapKey\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eDIP\u003c/span\u003e    \u003cspan class=\"n\"\u003etypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIPv6\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;$union0\u0026#34;`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSIP\u003c/span\u003e    \u003cspan class=\"n\"\u003etypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIPv6\u003c/span\u003e \u003cspan class=\"s\"\u003e`align:\u0026#34;$union1\u0026#34;`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFamily\u003c/span\u003e \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e      \u003cspan class=\"s\"\u003e`align:\u0026#34;family\u0026#34;`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePad7\u003c/span\u003e   \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e      \u003cspan class=\"s\"\u003e`align:\u0026#34;pad7\u0026#34;`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePad8\u003c/span\u003e   \u003cspan class=\"kt\"\u003euint16\u003c/span\u003e     \u003cspan class=\"s\"\u003e`align:\u0026#34;pad8\u0026#34;`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSPort\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e     \u003cspan class=\"s\"\u003e`align:\u0026#34;sport\u0026#34;`\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eDPort\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e     \u003cspan class=\"s\"\u003e`align:\u0026#34;dport\u0026#34;`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// SockmapValue is the fd of a socket\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// +k8s:deepcopy-gen=true\u003c/span\u003e\n\u003cspan class=\"c\"\u003e// +k8s:deepcopy-gen:interfaces=github.com/cilium/cilium/pkg/bpf.MapValue\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eSockmapValue\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efd\u003c/span\u003e \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"/blog/trip-large-scale-cloud-native-networking-and-security-with-cilium-ebpf/\"\u003eTrip.com: Large Scale Cloud Native Networking \u0026amp; Security with Cilium/eBPF, 2022\u003c/a\u003e\nshows how to decode the encoded entries of Cilium BPF map.\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eip2hex.sh\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e | \u003cspan class=\"nb\"\u003eawk\u003c/span\u003e \u003cspan class=\"nt\"\u003e-F\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{printf(\u0026#34;%02x %02x %02x %02x\\n\u0026#34;,$1,$2,$3,$4);}\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003ehex2port.sh\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e | \u003cspan class=\"nb\"\u003eawk\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{printf(\u0026#34;0x%s%s 0x%s%s\\n\u0026#34;, $1, $2, $5, $6) }\u0026#39;\u003c/span\u003e | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;s/ /\\n/g\u0026#39;\u003c/span\u003e | xargs \u003cspan class=\"nt\"\u003e-n1\u003c/span\u003e \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;%d\\n\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./ip2hex.sh \u003cspan class=\"s2\"\u003e\u0026#34;10.10.134.48\u0026#34;\u003c/span\u003e\n0a 0a 86 30\n\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./ip2hex.sh \u003cspan class=\"s2\"\u003e\u0026#34;10.10.101.249\u0026#34;\u003c/span\u003e\n0a 0a 65 f9\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003ecilium-agent\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump \u003cspan class=\"nb\"\u003eid \u003c/span\u003e122 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 86 30\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e 2 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 65 f9\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e 2 | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e 2 \u003cspan class=\"s2\"\u003e\u0026#34;db 78\u0026#34;\u003c/span\u003e\n0a 0a 86 30 00 00 00 00  00 00 00 00 00 00 00 00\n0a 0a 65 f9 00 00 00 00  00 00 00 00 00 00 00 00\n01 00 00 00 1f 90 00 00  db 78 00 00\n\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\nkey:\n\u003cspan class=\"nt\"\u003e--\u003c/span\u003e\n0a 0a 65 f9 00 00 00 00  00 00 00 00 00 00 00 00\n0a 0a 86 30 00 00 00 00  00 00 00 00 00 00 00 00\n01 00 00 00 db 78 00 00  1f 90 00 00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003enode\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./hex2port.sh \u003cspan class=\"s2\"\u003e\u0026#34;1f 90 00 00  b6 8a 00 00\u0026#34;\u003c/span\u003e\n8080\n46730 \u003cspan class=\"c\"\u003e# you can verify this connection in `ss` output\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAlmost all of the following entries are stale (because this is an empty, no node-to-pod traffic unless we do manually):\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003ecilium-agent\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump /sys/fs/bpf/cilium_sock_ops | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 86 30\u0026#34;\u003c/span\u003e | \u003cspan class=\"nb\"\u003ewc\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e\n7325\n\u003cspan class=\"o\"\u003e(\u003c/span\u003ecilium-agent\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump /sys/fs/bpf/cilium_sock_ops | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 8c ca\u0026#34;\u003c/span\u003e | \u003cspan class=\"nb\"\u003ewc\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e\n1288\n\u003cspan class=\"o\"\u003e(\u003c/span\u003ecilium-agent\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebpftool map dump /sys/fs/bpf/cilium_sock_ops | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;0a 0a 8e 40\u0026#34;\u003c/span\u003e | \u003cspan class=\"nb\"\u003ewc\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e\n191\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1 id=\"5-technical-summary\"\u003e5 Technical summary\u003c/h1\u003e\n\n\u003ch2 id=\"51-normal-sockopssockmap-bpf-workflow\"\u003e5.1 Normal sockops/sockmap BPF workflow\u003c/h2\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"/assets/img/tcp-stuck-after-connection-established/sockops-init-on-connection-estab.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\u003cp align=\"center\"\u003eFig. sockops BPF: connection establishement and socket handler initialization.\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eNode client (e.g. kubelet) -\u0026gt; server: \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003einitiate TCP connection\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e to the server\u003c/li\u003e\n  \u003cli\u003eKernel (and the BPF code in kernel): on listening on connection established\n    \u003col\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003ewrite two entries to sockmap\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003elink entries to bpf handlers\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e (\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcp_bpf_{sendmsg, recvmsg}\u003c/code\u003e)\u003c/li\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n  \u003cli\u003eNode client (e.g. kubelet) -\u0026gt; server: send \u0026amp; receive payload: BPF handlers were executed\u003c/li\u003e\n  \u003cli\u003eNode client (e.g. kubelet) -\u0026gt; server: close connection: kernel \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eremoves entries from sockmap\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"52-direct-cause\"\u003e5.2 Direct cause\u003c/h2\u003e\n\n\u003cp\u003eThe problem arises in step 4, for an unknown reason, some entries are not deleted when connections closed. This\nleads to incorrect handler initialization in new connections in step 2 (or section \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003e3.1\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e in the picture).\nWhen hit a stale entry,\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003esender side uses \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eBPF message handlers\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e for transmission;\u003c/li\u003e\n  \u003cli\u003eserver side treats the the socket as standard, and waits for message via\n\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003edefault message handler\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e, then \u003cstrong\u003e\u003cmark\u003e\u003ccode\u003estucks\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e\nthere as no payload goes to default handler.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"53-root-cause-tbd\"\u003e5.3 Root cause: TBD\u003c/h2\u003e\n\n\u003cp\u003eReason for why kernel failed to delete those entries (or delete them failed) is still under investigation.\nWe would like to thank Alibaba \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecloud-kernel\u003c/code\u003e team for their help.\u003c/p\u003e\n\n\u003cp\u003esockmap entries (kind of BPF objects) are deleted in a gabarge collection (GC) mechanism,\nwhich indicates that those stale entries may still be hold by some kernel objects, such as socket objects.\u003c/p\u003e\n\n\u003ch2 id=\"54-restoreremediation-methods\"\u003e5.4 Restore/remediation methods\u003c/h2\u003e\n\n\u003cp\u003eIf the issue already happened, you can use one of the following methods to restore:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eKernel restart\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e: drain the node then restart it, thish will refresh the kernel state;\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e\u003cmark\u003e\u003ccode\u003eManual clean\u003c/code\u003e\u003c/mark\u003e\u003c/strong\u003e with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebpftool\u003c/code\u003e: with caution, avoid to remove valid entries.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"appendix\"\u003eAppendix\u003c/h1\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/ArthurChiao/arthurchiao.github.io/tree/master/assets/code/tcp-stuck-after-connection-established\"\u003ebpftrace scripts used in this post\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\n\u003col\u003e\n  \u003cli\u003eAliOS kernel (a Linux fork), \u003ca href=\"https://gitee.com/anolis/cloud-kernel\"\u003egitee.com/anolis/cloud-kernel\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/cilium-network-topology-on-aws/\"\u003eCilium Network Topology and Traffic Path on AWS (2019)\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003ecilium v1.11.10, \u003ca href=\"https://github.com/cilium/cilium/blob/v1.11.10/bpf/sockops/bpf_sockops.c\"\u003ebpf_sockops.c\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003ecilium v1.11.10, \u003ca href=\"https://github.com/cilium/cilium/blob/v1.11.10/pkg/maps/sockmap/sockmap.go#L20\"\u003ebpf sockops key \u0026amp; value definition\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/differentiate-bpf-redirects/\"\u003eDifferentiate three types of eBPF redirections\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"/blog/trip-large-scale-cloud-native-networking-and-security-with-cilium-ebpf/\"\u003eTrip.com: Large Scale Cloud Native Networking \u0026amp; Security with Cilium/eBPF, 2022\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003e\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-white.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://notbyai.fyi\"\u003e\u003cimg src=\"/assets/img/Written-By-Human-Not-By-AI-Badge-black.svg\" alt=\"Written by Human, Not by AI\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n  \u003c!-- POST NAVIGATION --\u003e\n  \u003cdiv class=\"postNav clearfix\"\u003e\n     \n      \u003ca class=\"prev\" href=\"/blog/practical-storage-hierarchy/\"\u003e\u003cspan\u003e« Practical Storage Hierarchy and Performance: From HDDs to On-chip Caches（2024）\u003c/span\u003e\n      \n    \u003c/a\u003e\n      \n     \n  \u003c/div\u003e\n\u003c/div\u003e",
  "published_at": "2024-06-26T00:00:00Z"
}